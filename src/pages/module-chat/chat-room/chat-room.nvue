<template>
  <VNavbar title="聊天">
    <template #right>
      <view class="right-icons">
        <VIcon :icon="'\ue6fd'" @click="navToChatSetRoute" />
      </view>
    </template>
  </VNavbar>

  <!-- 聊天内容区域 -->
  <view ref="chatModuleRef" class="chat-module" :style="{ height: `${ chatModuleHeight }px` }" @touchend="chatModuleTouchendEvt">
    <scroll-view
      scroll-y
      class="scroll-y-view"
      :style="{ height: `${ chatModuleHeight }px` }"
      :scroll-with-animation="true"
      :scroll-into-view="scrollViewIntoId"
      >
      <!-- 顶部占位块 -->
      <view style="height: 30rpx;" />

      <view v-for="(item, index) in chatMsgList" :id="`chatMsgItem-${ index }`" :key="index">
         <ChatMsgItem
         :chatItem="item"
         :chatIndex="index"
         :prevChatTime="index > 0 ? chatMsgList[index-1].create_time : '0'"
         @longpress="onChatMsgItemLongpressEvt"
        />
      </view>

      <!-- 底部占位块 -->
      <view id="chatMsgItem-last" style="height: 30rpx; background: red;" />
    </scroll-view>
  </view>

  <!-- 底部输入框、工具栏 -->
  <view ref="inputModuleRef" class="input-module" :style="{ paddingBottom: (keyboardHeight || appStore.sysSafeAreaHeight) + 'px' }">
    <!-- 输入栏-区域 -->
    <view class="input-box">
      <VIcon v-if="inputMode === 'audio'" :size="45" :icon="'\ue607'" />
      <VIcon v-else :size="45" :icon="'\ue606'" />
      <!-- 输入框 -->
      <view class="input-wrap">
        <!-- 录音按钮 -->
        <view v-if="inputMode === 'audio'" class="rounded flex align-center justify-center" style="height: 80rpx;" :class="isRecording?'bg-hover-light':'bg-white'" @touchstart="voiceTouchStart" @touchend="voiceTouchEnd" @touchcancel="voiceTouchCancel" @touchmove="voiceTouchMove">
          <text class="font">{{ isRecording ? '松开 结束':'按住 说话' }}</text>
        </view>
        
        <textarea
          v-else
          ref="textareaRef"
          v-model="inputValue"
          class="input-textarea"
          fixed
          auto-height
          :auto-focus="false"
          :show-confirm-bar="false"
          :adjust-position="false"
          inputmode="text"
          @focus="onTextareaFocusEvt"
          @blur="onTextareaBlurEvt"
        ></textarea>
      </view>

      <!-- 表情icon -->
      <VIcon :icon="'\ue605'" :iconStyle="{ 'marginRight': '20rpx' }" :size="45" @click="changeActionOrEmoji('emoji')" />
      <!-- 扩展icon -->
      <VIcon v-if="!inputValue.length" :icon="'\ue603'" :size="45" @click="changeActionOrEmoji('action')" />
      <!-- 发送按钮 -->
      <view v-else class="send-btn" @click="sendChatMsg('text', inputValue)">
        <text class="send-btn-text">发 送</text>
      </view>
    </view>

    <!-- 工具栏-区域 -->
    <view v-if="['action', 'emoji'].includes(inputMode)" class="tool-box">
      <!-- 工具 swiper -->
      <swiper v-if="inputMode === 'action'" indicator-dots class="action-swiper">
        <swiper-item v-for="(aItem, aIndex) in actionList" :key="aIndex" class="action-switerItem">
          <view v-for="(aSubItem, aSubIndex) in aItem" :key="aSubIndex" class="action-boxItem" :style="{ width: `${ actionBoxWidth }px` }" @click="clickActionItem(aSubItem.event)">
            <image :src="aSubItem.icon" mode="aspectFill" class="action-icon" />
            <text class="action-text">{{ aSubItem.name }}</text>
          </view>
        </swiper-item>
      </swiper>

      <!-- 表情 scroll -->
      <scroll-view v-if="inputMode === 'emoji'" scroll-y class="emoji-scroll">
        <view v-for="(eItem, eIndex) in emojiList" :key="eIndex" class="emoji-view">
          <text class="emoji-text" @click="selectEmojiItem(eItem)">{{ eItem }}</text>
        </view>
      </scroll-view>
    </view>
  </view>

  <!-- chat 菜单弹窗 -->
  <VPopup ref="chatMenuVPopupRef" mode="custom" :maskColor="false" :bodyWidth="240" :bodyHeight="chatMenuHeight" :tabbarHeight="inputModuleHeight">
    <view class="menu-popup">
      <view v-for="(mItem, mIndex) in chatMenuListComputed" :key="mIndex" class="menu-item" hover-class="bg-light" @click="clickChatMenuItem(mItem.event)">
        <text class="menu-item-text">{{ mItem.name }}</text>
      </view>
    </view>
  </VPopup>
</template>

<script setup lang="ts">
import config from '@/config';
import dayjs from 'dayjs';
import * as indexUtil from '@/utils'; 
import VPopup from '@/components/VPopup/VPopup.vue';
import { useAppStore } from '@/store';
import { number } from '@climblee/uv-ui/libs/function/test.js';
// #ifdef APP-NVUE
const domModule = uni.requireNativePlugin('dom');
// #endif

const appStore = useAppStore();

type VPopupType = InstanceType<typeof VPopup>;
// 会话菜单 popup ref
const chatMenuVPopupRef = ref<VPopupType | null>(null);

type TInputMode = 'text' | 'action' | 'emoji' | 'audio';
// 会话菜单 popup ref
const textareaRef = ref(null);
// 输入框模式 text：输入文字，emoticon：表情，action：操作，audio：音频
const inputMode = ref<TInputMode>('text' as TInputMode);
// 键盘高度
const keyboardHeight = ref(0);
// 音频录制状态
const isRecording = ref(false);
// 聊天文本
const inputValue = ref('');
// 输入框失去焦点光标位置
const inputBlurCursor = ref(0);
// 聊天模块高度
const chatModuleHeight = ref(0);
// scrollView into id
const scrollViewIntoId = ref('');
const scrollViewIntoTimer = ref<number | null>(null);

// 聊天消息列表
const chatMsgList = ref([
  { from_user_id: 1, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '艾伦沃克', type: 'text', create_time: '1643252041', data: '😀你好，我是艾伦沃克，我有成名歌曲 Faded 活遍全球，你应该还没有听过吧？' },
  { from_user_id: 2, isremove: true, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242041', data: '是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯' },
  { from_user_id: 1, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242021', data: '沃克，沃克牛逼' },
  { from_user_id: 2, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242041', data: '是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯' },
  { from_user_id: 2, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242041', data: '是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯' },
  { from_user_id: 2, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242041', data: '是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯' },
  { from_user_id: 1, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242021', data: '沃克，沃克牛逼' },
  { from_user_id: 2, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '马丁盖瑞斯', type: 'text', create_time: '1743242041', data: '是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯是马丁盖瑞斯' },
]);

const chatModuleRef = ref(null);
const inputModuleRef = ref(null);
// 底部输入框高度 px
const inputModuleHeight = ref(0);

// chat 菜单列表
const chatMenuListData = ref([
  { name: '复制', event: 'copyMsg', isShow: true },
  { name: '转发', event: 'changeMsg', isShow: true },
  { name: '收藏', event: 'collectMsg', isShow: true },
  { name: '删除', event: 'deleteMsg', isShow: true },
  { name: '撤回', event: 'revokeMsg', isShow: false }
]);
const chatMenuListComputed = computed(() => chatMenuListData.value.filter((item: any) => item.isShow));

// chat 菜单列表高度 rpx
const chatMenuHeight = computed(() => {
  const _menuItemHeight = 100;
  return chatMenuListComputed.value.length * _menuItemHeight;
});

// chat 菜单列表高度 rpx
const actionBoxWidth = computed(() => {
  // const _menuItemHeight = 100;
  return appStore.systemInfo.windowWidth / 4;
});

// 长按激活的 chat msg index
const longpressActiveChatMsgIndex = ref(-1);

const actionList = ref([
  [
    { name: '相册', icon: '/static/images/extends/pic.png', event: 'uploadImage' },
    { name: '拍摄', icon: '/static/images/extends/video.png', event: 'uploadVideo' },
    { name: '收藏', icon: '/static/images/extends/shoucan.png', event: 'openFava' },
    { name: '名片', icon: '/static/images/extends/man.png', event: 'sendCard' },
    { name: '语音通话', icon: '/static/images/extends/phone.png', event: '' },
    { name: '位置', icon: '/static/images/extends/path.png', event: '' }
  ],
  [
    { name: '礼物', icon: '/static/images/extends/shoucan.png', event: '' },
    { name: '转账', icon: '/static/images/extends/shoucan.png', event: '' },
    { name: '音乐', icon: '/static/images/extends/shoucan.png', event: '' },
  ],
]);

const emojiList = ref(config.emojiData);

watch(keyboardHeight, async (newkboardHeight) => {
  // console.log('键盘高度:', newkboardHeight);
  await nextTick();
  // 重新计算聊天模块高度
  _calcChatModuleHeight();
});

onLoad(() => {
  // console.log('当前时间:', dayjs().format('YYYY年MM月DD日 HH:mm:ss'));
  // console.log('onLoad:', uni.getSystemInfoSync());
});

onMounted(() => {
  // fixbug：不加setTimeout算出来的宽度会不准，极其坑
  setTimeout(() => {
    _calcChatModuleHeight();
  }, 0);

  // #ifdef APP-NVUE
  uni.onKeyboardHeightChange(_keyboardListenerFunc);
  // #endif
});

// 组件卸载时移除键盘高度变化监听
onUnmounted(() => {
  // #ifdef APP-NVUE
  uni.offKeyboardHeightChange(_keyboardListenerFunc);
  // #endif
});

/**
 * 
 * 键盘高度变化 回调函数
 */
const _keyboardListenerFunc = (res: any)=> {
  // #ifdef APP-NVUE
    if (res.height === 0) {
      // @ts-ignore
      textareaRef.value.blur();
    }
  // #endif
};

/**
 * 计算聊天模块高度
 */
const _calcChatModuleHeight = () => {
  const systemInfo = uni.getSystemInfoSync();
  // console.log('系统信息：', systemInfo);
  const windowHeight = systemInfo.windowHeight;
  // console.log('窗口高度 windowHeight：', windowHeight);

  // #ifdef APP-NVUE
  setTimeout(() => {
    // 获取消息节点信息
    domModule.getComponentRect(chatModuleRef.value, (dom1: any) => {
      // 获取底部输入框节点信息
      domModule.getComponentRect(inputModuleRef.value, (dom2: any) => {
        inputModuleHeight.value = dom2.size.height;
        chatModuleHeight.value = windowHeight - dom1.size.top - dom2.size.height;
        // scrollView 滚动到底部
        _scrollViewToIntoView();
      });
    });
  }, 100);
  // #endif

  // #ifndef APP-NVUE
  const chatModuleNode = uni.createSelectorQuery().select('.chat-module');
  chatModuleNode.boundingClientRect((rect1: any) => {
      // 底部模块选择器节点
      const bottomModuleNode = uni.createSelectorQuery().select('.input-module');
      bottomModuleNode.boundingClientRect((rect2: any) => {
        inputModuleHeight.value = rect2.height;
        chatModuleHeight.value = windowHeight - rect1.top - rect2.height;
        // scrollView 滚动到底部
        _scrollViewToIntoView();
      }).exec();
    }).exec();
  // #endif
};

/**
 * scrollView 滚动指定位置（默认底部）
 */
 const _scrollViewToIntoView = (id = 'chatMsgItem-last') =>{
  // 首先清除上一次的定时器
  if (scrollViewIntoTimer.value) clearTimeout(scrollViewIntoTimer.value);

  scrollViewIntoTimer.value = setTimeout(async () => {
    // 将scrollIntoView属性设置为 "chatMsgItem-last"，以便滚动窗口到最后一条消息
    scrollViewIntoId.value = id;

    // 等待 DOM 更新，即：滚动完成
    await nextTick();
    scrollViewIntoId.value = '';
  }, 10);
};

/**
 * 打开会话菜单 popup
 */
const onChatMsgItemLongpressEvt = async (cItemLeftX: number, cItemTopY: number, cItemIndex: number) => {
  // console.log('长按会话item:', cItemLeftX, cItemTopY, cItemIndex);
  // 长按选中的 index
  longpressActiveChatMsgIndex.value = cItemIndex;
  // 拿到当前选中的对象
  const activeChatItem = chatMsgList.value[cItemIndex];
  // 是否是自己
  const isSelf = (1 === activeChatItem.from_user_id);
  // 不是自己就隐藏 撤回item
  if (isSelf) {
    chatMenuListData.value[4].isShow = true;
  } else {
    chatMenuListData.value[4].isShow = false;
  }
  // 等待 100ms 再打开 popup
  await indexUtil.sleepWait(500);
  // 打开会话菜单 popup
  chatMenuVPopupRef.value!.openVPopup(cItemLeftX, cItemTopY);
};

/**
 * 点击聊天菜单项
 */
const clickChatMenuItem = (eventName: string) => {
  // 拿到当前选中的对象
  const activeChatItem = chatMsgList.value[longpressActiveChatMsgIndex.value];
  console.log('点击聊天菜单项:', eventName, activeChatItem);

  switch (eventName) {
    // 撤回消息
    case 'revokeMsg':
      activeChatItem.isremove = true;
      break;
    // 删除消息
    case 'deleteMsg':
      // _delConvItem();
      break;
  }

  // 关闭会话菜单 popup
  chatMenuVPopupRef.value!.closeVPopup();
};

/**
 * 输入框聚焦点时触发
 */
 const onTextareaFocusEvt = (event: any) => {
  inputMode.value = 'text';
  keyboardHeight.value = event.detail.height;
  console.log('焦时触发:', event);
};

/**
 * 输入框失去焦点时触发
 */
const	onTextareaBlurEvt = (event: any) => {
  keyboardHeight.value = 0;
  console.log('失去焦点:', event);
  inputBlurCursor.value = event.detail.cursor;
};

/**
 * 录音开始
 */
const voiceTouchStart = () =>{
  console.log('录音开始');
};

/**
 * 录音结束
 */
const voiceTouchEnd = () =>{
  console.log('录音结束');
};

/**
 * 录音被打断
 */
const voiceTouchCancel = () =>{
  console.log('录音被打断');
};

/**
 * 录音手指移动
 */
const voiceTouchMove = () => {
  console.log('录音手指移动');
};

/**
 * 聊天页面 touchend 事件
 */
const chatModuleTouchendEvt = () =>{
  // #ifdef APP-NVUE
  // @ts-ignore
  textareaRef.value.blur();
  // #endif
};

/**
 * 打开扩展菜单 / 表情菜单
 */
const	changeActionOrEmoji = (mode: TInputMode) => {
  if (inputMode.value !== mode) {
    inputMode.value = mode;
  } else {
    inputMode.value = ('' as TInputMode);
  }

  // 隐藏软键盘
  uni.hideKeyboard();
  // 重新计算聊天模块高度
  _calcChatModuleHeight();
};

/**
 * 选择表情
 */
const selectEmojiItem = (emoji: any) => {
  console.log('选择表情:', emoji);

  // inputValue.value = inputValue.value += emoji;
  // inputValue根据inputBlurCursor位置插入 emoji
  inputValue.value = inputValue.value.slice(0, inputBlurCursor.value) + emoji + inputValue.value.slice(inputBlurCursor.value);
};

/**
 * 点击扩展菜单
 */
const clickActionItem = async (eventName: string) => {
  if (!eventName) return uni.$uv.toast('功能开发中');

  // 发送图片
  if (eventName === 'uploadImage') {
    const imgRes = await uni.chooseImage({ count: 9 });
    console.log(imgRes);
    // TODO: 上传图片
    // imgRes.tempFilePaths

    // uni.showLoading({ title: '', mask: true });
    // const imgPath = imgRes.tempFiles[0].tempFilePath;
    // console.log(imgRes);
    // imgUrl = await fileUtil.uploadFile(imgPath);
  }

  // 发送视频
  if (eventName === 'uploadVideo') {
    const videoRes = await uni.chooseImage({ count: 9 });
    console.log(videoRes);
    // TODO: 上传图片
    // imgRes.tempFilePaths

    // uni.showLoading({ title: '', mask: true });
    // const imgPath = imgRes.tempFiles[0].tempFilePath;
    // console.log(imgRes);
    // imgUrl = await fileUtil.uploadFile(imgPath);
  }
};

/**
 * 发送聊天消息：文本、图片、语音、视频、表情
 * @param msgType 消息类型
 * @param msgData 消息数据
 * @param msgOpt 消息选项
 */
const sendChatMsg = (msgType = 'text', msgData = '', msgOpt = {}) =>{
  let msgObj = { from_user_id: 1, isremove: false, avatar: 'https://img.yzcdn.cn/vant/cat.jpeg', nickname: '艾伦沃克', type: 'text', create_time: '1643252041', data: '' };
  // 文字消息
  if (msgType === 'text') {
    msgObj.data = msgData.trim();
    chatMsgList.value.push(msgObj);
  }

  // 发送文字成功，清空输入框
  if (msgType === 'text') inputValue.value = '';

  // scrollView 滚动到底部
  _scrollViewToIntoView();
};

/**
 * 进入聊天设置页面
 */
const navToChatSetRoute = () =>{
  console.log('进入聊天设置页面');
  // uni.$uv.route('/pages/module-chat/chat/chat', { name: 'uvui', age: 1 });
};
</script>

<style lang="scss" scoped>
@import './style.scss';
</style>
